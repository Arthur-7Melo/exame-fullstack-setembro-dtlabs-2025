services:
  postgres:
    image: postgres:15-alpine
    container_name: iotplatform_postgres
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - iotplatform_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 10s

  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: iotplatform_rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-guest}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD:-guest}
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - iotplatform_network
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 10s
      retries: 10
      start_period: 30s 

  redis:
    image: redis:7-alpine
    container_name: iotplatform_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - iotplatform_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 10s

  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: iotplatform_app
    ports:
      - "8080:8080"
    env_file:
      - .env
    environment:
      - DB_HOST=postgres
      - DB_PORT=${DB_PORT}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - SSL_MODE=${SSL_MODE}
      - JWT_SECRET=${JWT_SECRET}
      - AMQP_URL=amqp://${RABBITMQ_USER:-guest}:${RABBITMQ_PASSWORD:-guest}@rabbitmq:5672/
      - REDIS_URL=${REDIS_URL}
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - iotplatform_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  simulator:
    build:
      context: .
      dockerfile: Dockerfile.simulator
    container_name: iotplatform_simulator
    env_file:
      - .env
    environment:
      - AMQP_URL=amqp://${RABBITMQ_USER:-guest}:${RABBITMQ_PASSWORD:-guest}@rabbitmq:5672/
      - DEVICE_IDS=${DEVICE_IDS}
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - iotplatform_network
    restart: unless-stopped

volumes:
  postgres_data:
  rabbitmq_data:
  redis_data:

networks:
  iotplatform_network:
    driver: bridge